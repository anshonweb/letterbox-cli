name: Release LetterCLI

on:
  push:
    tags:
      - 'v*' # Triggers on tags like v1.0, v1.0.0-rc1

permissions:
  contents: write # Needed to create/update the GitHub Release
  packages: write # Needed if publishing to GitHub Packages
  id-token: write # Needed for OIDC (if used)

jobs:
  build-python-linux:
    name: Build Python Executables (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Or your preferred version

      - name: Install Python dependencies
        run: |
          pip install pyinstaller
          pip install -r python/scripts/requirements.txt

      - name: Build Linux Executables
        run: |
          cd python/scripts
          pyinstaller --onefile --clean get_diary.py
          pyinstaller --onefile --clean get_list_details.py
          pyinstaller --onefile --clean get_movie_details.py
          pyinstaller --onefile --clean get_watchlist.py
          pyinstaller --onefile --clean search_lists.py
          pyinstaller --onefile --clean search_movie.py
          pyinstaller --onefile --clean user_details.py
          cd ../.. # Back to root
          mkdir -p dist_py/linux_amd64
          cp python/scripts/dist/* dist_py/linux_amd64/

      - name: Upload Linux Executables
        uses: actions/upload-artifact@v4
        with:
          name: linux-py-execs
          path: dist_py/linux_amd64/

  build-python-windows:
    name: Build Python Executables (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          pip install pyinstaller
          pip install -r python/scripts/requirements.txt

      - name: Build Windows Executables
        run: |
          cd python/scripts
          pyinstaller --onefile --clean get_diary.py
          pyinstaller --onefile --clean get_list_details.py
          pyinstaller --onefile --clean get_movie_details.py
          pyinstaller --onefile --clean get_watchlist.py
          pyinstaller --onefile --clean search_lists.py
          pyinstaller --onefile --clean search_movie.py
          pyinstaller --onefile --clean user_details.py
          cd ..\.. # Back to root
          mkdir -p dist_py\windows_amd64
          copy python\scripts\dist\*.exe dist_py\windows_amd64\

      - name: Upload Windows Executables
        uses: actions/upload-artifact@v4
        with:
          name: windows-py-execs
          path: dist_py\windows_amd64\

  release-goreleaser:
    name: Build & Release (GoReleaser + Snap)
    needs: [build-python-linux, build-python-windows]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for changelog generation

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      # --- Use the official action to set up Snapcraft/LXD ---
      - name: Set up Snapcraft
        uses: snapcore/action-setup-snapcraft@v1
        with:
          snapcraft-channel: stable

      - name: Set up LXD (for Snap build)
        run: |
          sudo snap install lxd
          sudo lxd init --auto
          # Add runner user to lxd group (might be needed)
          sudo usermod -a -G lxd $USER 
          # Note: A full logout/login isn't possible, but this + action-setup-snapcraft often works.
          # If permissions are still an issue, the action might need to run as root or handle group changes.

      - name: Download Linux Python Execs
        uses: actions/download-artifact@v4
        with:
          name: linux-py-execs
          path: dist_py/linux_amd64/

      - name: Download Windows Python Execs
        uses: actions/download-artifact@v4
        with:
          name: windows-py-execs
          path: dist_py/windows_amd64/

      - name: Make Python Execs Executable
        run: chmod +x dist_py/linux_amd64/*

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest 
          args: release --clean 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build Snap Package
        run: |
          echo "GoReleaser finished. Manually building Snap package..."
          chmod +x ./scripts/build_snap.sh
          # Run the script. It will now run inside the LXD env set up by action-setup-snapcraft
          ./scripts/build_snap.sh 
          
      - name: Publish Snap to Store (if credentials added)
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
          SNAP_SECRET_IS_SET: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS != '' }}
        if: success() && env.SNAP_SECRET_IS_SET == 'true'
        run: |
          echo "Pushing Snap to store..."
          # Find the built .snap file in the dist directory
          SNAP_FILE=$(find dist/ -name "*.snap" | head -n 1)
          if [ -f "$SNAP_FILE" ]; then
            snapcraft push $SNAP_FILE --release=stable
          else
            echo "Snap file not found in dist/, skipping push."
            exit 1
          fi

