name: Release LetterCLI

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build-python-linux:
    name: Build Python Executables (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install Python dependencies
        run: |
          pip install pyinstaller
          pip install -r python/scripts/requirements.txt
      - name: Build Linux Executables
        run: |
          cd python/scripts
          pyinstaller --onefile --clean get_diary.py
          pyinstaller --onefile --clean get_list_details.py
          pyinstaller --onefile --clean get_movie_details.py
          pyinstaller --onefile --clean get_watchlist.py
          pyinstaller --onefile --clean search_lists.py
          pyinstaller --onefile --clean search_movie.py
          pyinstaller --onefile --clean user_details.py
          cd ../..
          mkdir -p dist_py/linux_amd64
          cp python/scripts/dist/* dist_py/linux_amd64/
      - name: Upload Linux Executables
        uses: actions/upload-artifact@v4
        with:
          name: linux-py-execs
          path: dist_py/linux_amd64/

  build-python-windows:
    name: Build Python Executables (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install Python dependencies
        run: |
          pip install pyinstaller
          pip install -r python/scripts/requirements.txt
      - name: Build Windows Executables
        run: |
          cd python/scripts
          pyinstaller --onefile --clean get_diary.py
          pyinstaller --onefile --clean get_list_details.py
          pyinstaller --onefile --clean get_movie_details.py
          pyinstaller --onefile --clean get_watchlist.py
          pyinstaller --onefile --clean search_lists.py
          pyinstaller --onefile --clean search_movie.py
          pyinstaller --onefile --clean user_details.py
          cd ..\..
          mkdir -p dist_py\windows_amd64
          copy python\scripts\dist\*.exe dist_py\windows_amd64\
      - name: Upload Windows Executables
        uses: actions/upload-artifact@v4
        with:
          name: windows-py-execs
          path: dist_py\windows_amd64\

  release-goreleaser:
    name: Build & Release (GoReleaser + Snap)
    needs: [build-python-linux, build-python-windows]
    runs-on: ubuntu-latest
    
    outputs: 
      release_upload_url: ${{ steps.goreleaser.outputs.release_upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Download Linux Python Execs
        uses: actions/download-artifact@v4
        with:
          name: linux-py-execs
          path: dist_py/linux_amd64/

      - name: Download Windows Python Execs
        uses: actions/download-artifact@v4
        with:
          name: windows-py-execs
          path: dist_py/windows_amd64/

      - name: Make Python Execs Executable
        run: chmod +x dist_py/linux_amd64/*

      - name: Run GoReleaser (Builds Binaries & Archives)
        id: goreleaser 
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest 
          args: release --clean 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Stage Snap Files
        run: |
          echo "Staging files for Snap build..."
          chmod +x ./scripts/build_snap.sh
          ./scripts/build_snap.sh

      - name: Build Snap Package
        uses: snapcore/action-build@v1
        id: snapcraft
        with:
          path: dist/snap_build
          
      - name: Upload Snap to Release
        uses: actions/upload-release-asset@v1
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.goreleaser.outputs.release_upload_url }}
          asset_path: ${{ steps.snapcraft.outputs.snap }}
          asset_name: ${{ steps.snapcraft.outputs.snap }}
          asset_content_type: application/vnd.snap

      - name: Publish Snap to Store (if credentials added)
        uses: snapcore/action-publish@v1
        env:
          SNAP_SECRET_IS_SET: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS != '' }}

        if: success() && env.SNAP_SECRET_IS_SET == 'true'

        with:
          store_credentials: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
          snap: ${{ steps.snapcraft.outputs.snap }}
          release: stable 

