name: Release LetterCLI

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build-python-linux:
    name: Build Python Executables (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('python/scripts/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install pyinstaller
          pip install -r python/scripts/requirements.txt

      - name: Build Linux Executables
        run: |
          cd python/scripts
          for s in get_diary get_list_details get_movie_details get_watchlist search_lists search_movie user_details; do
            pyinstaller --onefile --clean "$s.py"
          done
          cd ../..
          mkdir -p dist_py/linux_amd64
          cp python/scripts/dist/* dist_py/linux_amd64/

      - name: Upload Linux Executables
        uses: actions/upload-artifact@v4
        with:
          name: linux-py-execs
          path: dist_py/linux_amd64/

  build-python-windows:
    name: Build Python Executables (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install pyinstaller
          pip install -r python/scripts/requirements.txt

      - name: Build Windows Executables
        shell: pwsh
        run: |
          Set-Location python/scripts
          $scripts = @('get_diary','get_list_details','get_movie_details','get_watchlist','search_lists','search_movie','user_details')
          foreach ($s in $scripts) {
            pyinstaller --onefile --clean "$($s).py"
          }
          Set-Location ../..
          New-Item -ItemType Directory -Force -Path dist_py/windows_amd64 | Out-Null
          Copy-Item python/scripts/dist/*.exe dist_py/windows_amd64/ -Force

      - name: Upload Windows Executables
        uses: actions/upload-artifact@v4
        with:
          name: windows-py-execs
          path: dist_py/windows_amd64/

  release-goreleaser:
    name: Build & Release (GoReleaser + Snap)
    needs:
      - build-python-linux
      - build-python-windows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Download Linux Python Execs
        uses: actions/download-artifact@v4
        with:
          name: linux-py-execs
          path: dist_py/linux_amd64/

      - name: Download Windows Python Execs
        uses: actions/download-artifact@v4
        with:
          name: windows-py-execs
          path: dist_py/windows_amd64/

      - name: Make Python Execs Executable
        run: chmod +x dist_py/linux_amd64/* || true

      - name: Run GoReleaser (build and publish)
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Stage Snap Files
        run: |
          echo "Staging files for Snap build..."
          chmod +x ./scripts/build_snap.sh || true
          ./scripts/build_snap.sh
          cp -r .git dist/snap_build/.git

      - name: Build Snap Package
        id: snapcraft
        uses: snapcore/action-build@v1
        with:
          path: dist/snap_build

      - name: Publish Snap to Store (only if credentials are present)
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
        run: |
          if [ -n "$SNAPCRAFT_STORE_CREDENTIALS" ]; then
            echo "Publishing Snap to Store..."
            snapcraft upload "${{ steps.snapcraft.outputs.snap }}" --release=stable --store-credentials <(echo "$SNAPCRAFT_STORE_CREDENTIALS")
          else
            echo "SNAPCRAFT_STORE_CREDENTIALS not set. Skipping publish."
          fi
