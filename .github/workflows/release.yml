name: Release LetterCLI

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build-python-linux:
    name: Build Python Executables (Linux)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('python/scripts/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          pip install pyinstaller
          pip install -r python/scripts/requirements.txt

      - name: Build Linux Executables
        run: |
          cd python/scripts
          for script in get_diary get_list_details get_movie_details get_watchlist search_lists search_movie user_details; do
            pyinstaller --onefile --clean "$script.py"
          done
          cd ../..
          mkdir -p dist_py/linux_amd64
          cp python/scripts/dist/* dist_py/linux_amd64/

      - name: Upload Linux Executables
        uses: actions/upload-artifact@v4
        with:
          name: linux-py-execs
          path: dist_py/linux_amd64/

  build-python-windows:
    name: Build Python Executables (Windows)
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          pip install pyinstaller
          pip install -r python/scripts/requirements.txt

      - name: Build Windows Executables
        shell: pwsh
        run: |
          cd python/scripts
          $scripts = @(
            "get_diary", "get_list_details", "get_movie_details",
            "get_watchlist", "search_lists", "search_movie", "user_details"
          )
          foreach ($s in $scripts) {
            pyinstaller --onefile --clean "$s.py"
          }
          cd ../..
          New-Item -ItemType Directory -Force -Path dist_py/windows_amd64 | Out-Null
          Copy-Item python/scripts/dist/*.exe dist_py/windows_amd64/

      - name: Upload Windows Executables
        uses: actions/upload-artifact@v4
        with:
          name: windows-py-execs
          path: dist_py/windows_amd64/

  release-goreleaser:
    name: Build & Release (GoReleaser + Snap)
    needs: [build-python-linux, build-python-windows]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Download Linux Python Execs
        uses: actions/download-artifact@v4
        with:
          name: linux-py-execs
          path: dist_py/linux_amd64/

      - name: Download Windows Python Execs
        uses: actions/download-artifact@v4
        with:
          name: windows-py-execs
          path: dist_py/windows_amd64/

      - name: Make Python Execs Executable
        run: chmod +x dist_py/linux_amd64/*

      - name: Run GoReleaser (Builds Binaries & Publishes Release)
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Stage Snap Files
        run: |
          echo "Staging files for Snap build..."
          chmod +x ./scripts/build_snap.sh
          ./scripts/build_snap.sh

      - name: Build Snap Package
        id: snapcraft
        uses: snapcore/action-build@v1
        with:
          path: dist/snap_build

      - name: Debug Snap output
        run: echo "Built Snap path: ${{ steps.snapcraft.outputs.snap }}"

      - name: Upload Snap to GitHub Release
        if: success() && steps.snapcraft.outputs.snap != ''
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.snapcraft.outputs.snap }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Publish Snap to Store
        if: success() && secrets.SNAPCRAFT_STORE_CREDENTIALS != ''
        uses: snapcore/action-publish@v1
        with:
          store_credentials: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
          snap: ${{ steps.snapcraft.outputs.snap }}
          release: stable
